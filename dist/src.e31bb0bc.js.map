{"version":3,"sources":["letters.js","index.js"],"names":["Letters","opts","options","elements","document","querySelectorAll","el","whiteSpaceClass","forEach","element","split","textContent","spanify","map","letter","index","newEl","createElement","style","setProperty","classList","add","innerHTML","append"],"mappings":";;ACAA;;AAIA,sBAAQ;AACNM,EAAAA,EAAE,EAAE,GADE;AAENC,EAAAA,eAAe,EAAE;AAFX,CAAR;;;;;;;;ADJO,SAASP,OAAT,CAAiBC,IAAjB,EAAuB;AAC5B,MAAMC,OAAO,GAAGD,IAAI,IAAI,EAAxB;AACA,MAAME,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0BH,OAAO,CAACI,EAAlC,CAAjB;AACA,MAAMC,eAAe,GAAGL,OAAO,CAACK,eAAR,IAA2B,YAAnD;AAEAJ,EAAAA,QAAQ,CAACK,OAAT,CAAiB,UAAAC,OAAO,EAAI;AAC1B;AACA,QAAMC,KAAK,sBAAOD,OAAO,CAACE,WAAf,CAAX,CAF0B,CAI1B;;;AACA,QAAMC,OAAO,GAAGF,KAAK,CAACG,GAAN,CAAU,UAACC,MAAD,EAASC,KAAT,EAAmB;AAC3C,UAAMC,KAAK,GAAGZ,QAAQ,CAACa,aAAT,CAAuB,MAAvB,CAAd;AACAD,MAAAA,KAAK,CAACL,WAAN,GAAoBG,MAApB;AACAE,MAAAA,KAAK,CAACE,KAAN,CAAYC,WAAZ,CAAwB,SAAxB,EAAmCJ,KAAnC,EAH2C,CAK3C;;AACA,UAAID,MAAM,KAAK,GAAf,EAAoB;AAClBE,QAAAA,KAAK,CAACI,SAAN,CAAgBC,GAAhB,CAAoBd,eAApB;AACD;;AACD,aAAOS,KAAP;AACD,KAVe,CAAhB,CAL0B,CAiB1B;;AACAP,IAAAA,OAAO,CAACa,SAAR,GAAoB,EAApB;AACAV,IAAAA,OAAO,CAACJ,OAAR,CAAgB,UAAAF,EAAE;AAAA,aAAIG,OAAO,CAACc,MAAR,CAAejB,EAAf,CAAJ;AAAA,KAAlB;AACD,GApBD;AAqBD","file":"src.e31bb0bc.js","sourceRoot":"../src","sourcesContent":["export function Letters(opts) {\n  const options = opts || {}\n  const elements = document.querySelectorAll(options.el)\n  const whiteSpaceClass = options.whiteSpaceClass || 'whitespace'\n\n  elements.forEach(element => {\n    // Split all letters into an array\n    const split = [...element.textContent];\n\n    // turn every letter into a span \n    const spanify = split.map((letter, index) => {\n      const newEl = document.createElement('span')\n      newEl.textContent = letter\n      newEl.style.setProperty('--index', index)\n\n      // Check if letter is a whitespace and add a class\n      if (letter === ' ') {\n        newEl.classList.add(whiteSpaceClass)\n      }\n      return newEl\n    })\n\n    // populate element with nested spans\n    element.innerHTML = ''\n    spanify.forEach(el => element.append(el))\n  })\n}","import {\n  Letters\n} from './letters'\n\nLetters({\n  el: 'p',\n  whiteSpaceClass: 'white'\n});"]}